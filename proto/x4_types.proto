syntax="proto3";

enum StorageType {
  STORAGE_TYPE_UNSPECIFIED = 0;
  STORAGE_TYPE_LIQUID = 1;
  STORAGE_TYPE_SOLID = 2;
  STORAGE_TYPE_CONTAINER = 10;
  // maybe more?
}

enum WareType {
  WARE_TYPE_UNSPECIFIED = 0;
  WARE_TYPE_RAW_MATERIAL = 1;
  WARE_TYPE_REFINED_PRODUCT = 2;
  WARE_TYPE_MODULE = 3;
}

// -----------------------------------------------------------------------------
// Ware types
// These are read from library/wares.xml
// -----------------------------------------------------------------------------

// wares.xml:<ware id="hydrogen" transport="liquid" volume="6" tags="economy minable">
// wares.xml:<ware id="ore" transport="solid" volume="10" tags="economy minable">
message RawMaterial {
  string material_id = 1;
  StorageType storage_type = 2;
  uint32 volume = 3;
}

// wares.xml: <ware id="hullparts" group="hightech" transport="container" volume="12" tags="container economy">
// wares.xml: <ware id="plasmaconductors" group="hightech" transport="container" volume="32" tags="container economy">
message RefinedProduct {
  string product_id = 1;
  // What kind of storage the product requires (typically 'container' for refined products)
  StorageType storage_type = 2;
  // How much storage volume is required for 1 unit of the product
  uint32 unit_volume = 3;
  // The other wares required to produce this product in a factory
  repeated RequiredWare required_wares = 4;
  // How long it takes for a production run
  uint32 production_time = 5;
  // How many units are produced in one production run
  uint32 production_amount = 6;
  // Multiplier applied to base production amount when at peak workforce
  // The multiplier is scaled back proportionately when limited workforce is available
  // For example: plasmaconductors amount=44 (this appears to be multiplied by 4)
  // workforce factor = .43
  // So at peak workforce, output is 44 * 4 * 1.43 = 252
  // Workforce max is 225, so at 100 workforce for example:
  // 100/225 * .43 = ~.19
  // 44 * 4 * 1.19 = 210
  float workforce_factor = 7;
}

message RequiredWare {
  string required_ware_id = 1;
  WareType ware_type = 2;
  uint32 amount = 3;
}

// -----------------------------------------------------------------------------
// Module types
// These are read from assets/structures/production|storage|dock/macros/
// -----------------------------------------------------------------------------
message GenericModule {
  string module_id = 1;
  string macro_name = 2;
}

message StorageModule {
  string module_id = 1;
  string macro_name = 2;
  StorageType storage_type = 3;
  uint32 storage_capacity = 4;
}

// prod_gen_hullparts_macro
//############## -> wares.xml:ware_id=module_gen_prod_hullparts_01
// -> assets/structures/production/macros/prod_gen_hullparts_macro.xml:'production wares'=hullparts
// There is more info
message ProductionModule {
  // This is the ID that appears in module_groups.xml and modules.xml
  // eg. prod_gen_antimattercells
  string module_id = 1;
  // This is the ID that appears in constructionplans.xml
  // eg. prod_gen_antimattercells_macro
  string macro_name = 2;
  // This is the ID that appears in wares.xml
  // eg. module_gen_prod_antimattercells_01
  string wares_xml_id = 3;
  // This is the name of the ware that is produced by this factory type
  // eg. antimattercells
  string product_name = 4;
  // Maximum workforce capacity
  uint32 workforce_max = 5;

  // Information about what factory types are required to produce this module are derived from the wares graph
  // This contains the details of what's needed to make it, so can be used to build
  // the dependency graph
//  RefinedProduct refined_product = 5;
}

// Taken from module_groups.xml:
//    <group name="prod_gen_antimattercells"> <-- ** ID/GROUP **
//      <select macro="prod_gen_antimattercells_macro" /> <-- ** MACRO **
//    </group>

// Taken from modules.xml:
//    <module id="prod_gen_antimattercells" group="prod_gen_antimattercells"> <-- ** ID/GROUP **
// What's made in this factory:
//    <category ware="antimattercells" tags="[production, module]" race="[argon, paranid, split, teladi]" faction="[argon, paranid, teladi, antigone, holyorder, trinity, buccaneers, ministry, hatikvah, alliance, scaleplate]" />

// Taken from wares.xml:
//    <ware id="module_gen_prod_antimattercells_01" name="{20104,10301}" description="{20104,10302}" transport="container" volume="1" tags="module">
//^^ FACTORY/MODULE ID ^^ ^^ CONTAINER TYPE ^^
//
//    <component ref="prod_gen_antimattercells_macro" /> <-- ** MACRO **


// Docks and Piers
// $USER/constructionplans.xml:entry.macro:pier_arg_harbor_03_macro -> (class=pier)
//############## -> wares.xml:'component ref'="pier_arg_harbor_03_macro" <- 'ware id':module_arg_pier_l_03 ->
// -> assets/structures/dock/macros/pier_arg_harbor_03_macro.xml (class=pier) vs (class=dockarea)
enum DockModuleType {
  DOCK_MODULE_TYPE_UNSPECIFIED = 0;
  DOCK_MODULE_TYPE_PIER = 1; // class=pier
  DOCK_MODULE_TYPE_DOCK = 2; // class=dockarea
}

message DockModule {
  // This is the ID that appears in module_groups.xml and modules.xml
  // eg. dockarea_arg_s_ship_02
  string module_id = 1;
  // This is the ID that appears in constructionplans.xml
  // eg. dockarea_arg_s_ship_02_macro
  string macro_name = 2;
  // The type of the dock (pier or dockarea).
  DockModuleType dock_type = 3;
}

// HabitatModule
// DefenceModule

message BuildEntry {
  // index in the plan of the current module
  uint32 entry_index = 1;
  // macro name of the current module
  string macro_name = 2;
  // The name of the current module's connection point that is connected to the predecessor
  string local_connection = 3;
  // index of predecessor module
  uint32 predecessor_index = 4;
  // The name of the predecessor's connection point that is connected to the current module
  string predecessor_connection = 5;
  // x,y,z coordinates for this module's position in the station plot
  EntryPosition position = 6;
  // pitch, yaw, roll for this module's orientation in the station plot
  EntryRotation rotation = 7;
}

message EntryPosition {
  int32 x_coord = 1;
  int32 y_coord = 2;
  int32 z_coord = 3;
}

message EntryRotation {
  float pitch = 1;
  float yaw   = 2;
  float roll  = 3;
}